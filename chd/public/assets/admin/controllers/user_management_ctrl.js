app.controller('userManagementCtrl', ['refreshTimeout','validationError', '$routeParams', '$scope', '$rootScope', '$http', '$location', '$animate', 'localStorageService', 'todoService', '$alert', '$timeout', 'AlertService', '$parse', '$window', 'userManagementService', 'ngDialog',    function(refreshTimeout, validationError, $routeParams, $scope, $rootScope, $http, $location, $animate, localStorageService, todoService, $alert, $timeout, AlertService, $parse, $window, userManagementService, ngDialog) {        $scope.users = [];        $scope.na = 'N/A';        $scope.categoryLst = [{            id: true,            name: 'Active'        }, {            id: false,            name: 'In Active'        }];        $rootScope.$on("userManagementController", function(){           $scope.userCount();        });        $scope.invalidForm = 'Invalid form! Please fill all required fields*';                /* Check and add active class on left side bar*/        $scope.isActive = function(path) {            var url = $location.path().split('/');            var myUrl = '/'+url[1]+'/'+url[2];            if (path == myUrl) {                return true;            }        };        /* close every opened dialog*/        $scope.closeAllDialog = function() {            ngDialog.closeAll();        };        /*update user detail on left side bar*/        $scope.updateSideBar = function() {            $scope.userCount();            updateInfo();        };        /*update user profile information*/        var updateInfo = function() {            $rootScope.userInfo = {                name: JSON.parse(localStorage.getItem('user')).user.firstname,                email: JSON.parse(localStorage.getItem('user')).user.email            };        };        /*if admin create account for user*/        $scope.signupByAdmin = function(user) {            $http.post('/admin/newAccountByAdmin', user).success(function(response) {                if (response.success === true) {                    $scope.newUser = [];                    $scope.userCount();                    var role = user.role;                    var url = role.match(/[A-Z]/g) ? role.replace(/[A-Z]/g, '-' + role.match(/[A-Z]/g)[0].toLowerCase()) : role;                    // $location.path('/users/' + url+ 's');                    AlertService.popUp({                        title: "Account Created",                        message: "User has been registered successfully.",                        type: 'success'                    });                } else {                    AlertService.popUp({                        title: "Error! ",                        message: response.msg,                        type: 'danger'                    });                }            });        };        /*Get user list according to tab selection and manage page heading*/        $scope.paging = {            page: 1        };        $scope.userList = function(type, s) {            $scope.forceEllipses = true;            $scope.maxSize = 5;            loadUser(type, s);            this.type = type;            this.s = s;        };        function loadUser(type, s) {            var url = $location.path().split("/").pop();            $scope.loadingUserList = true;            $scope.userListDiv = url == 'register' ? false : true;            if (type.charAt(0) == '$') {                var length = type.length;                var orderBy = length > 1 ? type.slice(1) : 'desc';                sortIcon(orderBy, length);                userManagementService.sort = orderBy;                $http.get('/admin/getUserList?key=' + $routeParams.type + "&sort=" + orderBy + "&paginate=" + $scope.paging.page).success(function(response) {                    $scope.loadingUserList = false;                    $scope.searchBar = response.searchBar;                    $scope.users = response.list;                    $scope.paging = response.paging;                    userManagementPageTittle($scope.users, url);                });            } else {                url = type.match(/[A-Z]/g) ? type.replace(/[A-Z]/g, '-' + type.match(/[A-Z]/g)[0].toLowerCase()) : type;                $location.path('/users/' + url.slice(0, -1));            }        }        /*Filter user by name or email id*/        $scope.searchUser = function(keyword) {            $scope.paging.count = 0;            $http.get('/admin/getUserList?search=' + keyword + '&&key=' + $routeParams.type).success(function(response) {                $scope.users = response.list;                $scope.searchBar = response.searchBar;            });        };        /*get next record by pagination*/        $scope.pageChanged = function() {            loadUser(this.type, this.s);        };        /*User count to show at left sidebar*/        $scope.userCount = function() {            $http.get('/admin/getUserCount').success(function(response) {                var data = response.data;                $rootScope.totalUsersCount = 0;                userManagementService.count = data;                for (i = 0; i < data.length; i++) {                    var name = data[i]._id + 'sCount';                    $rootScope[name] = data[i].count;                    $rootScope.totalUsersCount += data[i].count;                }            });        };        /*show hide sort icon*/        var sortIcon = function(s, l) {            if (l == 1) {                $scope.sort = 'desc1';            } else if (s == 'desc') {                $scope.sort = 'asc';            } else if (s == 'asc') {                $scope.sort = 'desc';            }        };        /*Page tittle for user management section*/        var userManagementPageTittle = function(res, user) {            if ($scope.users.length < 1) {                var indexOfHyphen = user.indexOf('-');                $scope.userlistTitle = indexOfHyphen == -1 ? user.charAt(0).toUpperCase() + user.slice(1) + 's' : user.substr(0, indexOfHyphen).charAt(0).toUpperCase() + user.substr(0, indexOfHyphen).slice(1) + " " + user.substr(indexOfHyphen + 1).charAt(0).toUpperCase() + user.substr(indexOfHyphen + 1).slice(1) + 's';            } else {                $scope.userlistTitle = $routeParams.type == 'all-users' ? 'Users' : res[0].role.replace(/([a-z])([A-Z])/g, '$1 $2').charAt(0).toUpperCase() + res[0].role.replace(/([a-z])([A-Z])/g, '$1 $2').slice(1) + 's';            }        };        var userListingType = function(user) {            var indexOfHyphen = user.indexOf('-');            var userType = indexOfHyphen == -1 ? user.slice(0, -1) : user.substr(0, indexOfHyphen) + user.substr(indexOfHyphen + 1).charAt(0).toUpperCase() + user.substr(indexOfHyphen + 1).slice(1, -1);            return userType;        };        /*Delete selected user*/        $scope.deleteUser = function(id, email, index, role, length) {            bootbox.confirm({                title: "Destroy planet?",                message: 'Are you sure you want to delete ' + email + '?',                buttons: {                    cancel: {                        label: '<i class="fa fa-times"></i> Cancel'                    },                    confirm: {                        label: '<i class="fa fa-check"></i> Confirm'                    }                },                callback: function(result) {                    if (result === true) {                        $http.get('/admin/delete?id=' + id + "&&role=" + role).success(function(response) {                            if (response.success === true) {                                $scope.users.splice(index, 1);                                $scope.userCount();                                AlertService.popUp({                                    title: "Deleted ! ",                                    message: "User has been deleted successfully.",                                    type: 'success'                                });                            } else {                                AlertService.popUp({                                    title: "Error!",                                    message: "Some Error occurred",                                    type: 'danger'                                });                            }                        });                    }                }            });        };        /*Action for active or deactive user*/        $scope.activeInactive = function(id, email, status, index, role) {            var s, st;            if (status === true) {                s = "deactivate";                st = false;            } else {                s = "activate";                st = true;            }            bootbox.confirm({                title: "Change State?",                message: 'Are you sure you want to ' + s + " " + email + '?',                buttons: {                    cancel: {                        label: '<i class="fa fa-times"></i> Cancel'                    },                    confirm: {                        label: '<i class="fa fa-check"></i> Confirm'                    }                },                callback: function(result) {                    if (result === true) {                        $http.get('/admin/changeStatus?id=' + id + "&status=" + st + "&role=" + role).success(function(response) {                            if (response.success === true) {                                $scope.users[index].status = st;                                AlertService.popUp({                                    title: "Changed ! ",                                    message: "Status changed successfully.",                                    type: 'success'                                });                            } else {                                AlertService.popUp({                                    title: "Error!",                                    message: "Network problem, Please try again",                                    type: 'danger'                                });                            }                        });                    }                }            });        };        /*Show user detail by click on every user*/        $scope.viewUserDetail = function(id, role, requestType) {            var url;            if (id == 'data') {                 url = $location.path().split("/");                var user = url.pop();                $scope.role = url[2];                $http.get('/admin/getUserDetail?id=' + user + "&&role=" + $scope.role).success(function(response) {                    var role = response.data.role.replace(/([a-z])([A-Z])/g, '$1 $2');                    $scope.userlistTitle = role.charAt(0).toUpperCase() + role.slice(1) + 's';                    if (response.success === true) {                        $scope.user = response.data;                        $scope.editAll = response.data.role == 'professionalTrader' ? true : false;                    }                });            } else {                role = role.match(/[A-Z]/g) ? role.replace(/[A-Z]/g, '-' + role.match(/[A-Z]/g)[0].toLowerCase()) : role;                 url = requestType == 'view' ? ('/users/' + role + "/view/" + id) : ('/users/' + role + "/edit/" + id);                $location.path(url);            }        };              /*Edit and save user*/        $scope.updateUser = function(updatedUser) {            $http.post('/admin/updateUserDetail', updatedUser).success(function(response) {                if (response.success === true) {                    $window.history.back();                    AlertService.popUp({                        title: "Modified! ",                        message: "User detail updated successfully.",                        type: 'success'                    });                } else {                    AlertService.popUp({                        title: "Error!",                        message: "Some Error occurred",                        type: 'danger'                    });                }            });        };        /*Open pop and get data to export */        $scope.exportCsvPopup = function() {            var countParameter;            var user = $location.path().split("/").pop();            var indexOfHyphen = user.indexOf('-');            if (indexOfHyphen == -1) {                $scope.userToExport = user.charAt(0).toUpperCase() + user.slice(1, -1);                countParameter = user;            } else {                var first = user.substr(0, indexOfHyphen);                var last = user.substr(indexOfHyphen + 1);                $scope.userToExport = first.charAt(0).toUpperCase() + first.slice(1) + " " + last.charAt(0).toUpperCase() + last.slice(1, -1);                countParameter = first + last.charAt(0).toUpperCase() + last.slice(1);            }            var filter = getUserCountToexport(countParameter);            $scope.countToExportPopup = filter;            userManagementService.countToExport = filter.count;            ngDialog.open({                template: 'exportCsvPopup',                scope: $scope,                className: 'ngdialog-theme-default',                closeByDocument: false            });        };        var getUserCountToexport = function(countParameter) {            var filter;            var data = userManagementService.count;            var index = data.findIndex(findIndex);            if (index > 0) {                data.splice(index, 1);            }            $scope.initialExportCount = 0;            var sum = data.map(sumCountProperty);            if ($routeParams.type == 'all-users') {                return sum.pop();            } else {                filter = userManagementService.count.find(function(x) {                    return x._id === countParameter.slice(0, -1);                });                return filter.count;            }        };        var findIndex = function(o) {            return o._id === null;        };        var sumCountProperty = function(a) {            $scope.initialExportCount += parseInt(a.count);            return $scope.initialExportCount;        };        /*Check valid condiction and print record to CSV*/        $scope.exportDataToCsv = function(e) {            var form = 'nice';            var to = parseInt(e.to);            var from = parseInt(e.from);            if (to > userManagementService.countToExport) {                form = 'bad';                $scope.newUser = [];                AlertService.popUp({                    title: "Invalid Request! ",                    message: "You can not export more than" + userManagementService.countToExport,                    type: 'danger'                });            } else if (to - from > 100) {                form = 'bad';                AlertService.popUp({                    title: "Invalid Request! ",                    message: "You can not export more than 100",                    type: 'danger'                });            } else if (from == $scope.countToExportPopup) {                form = 'bad';                AlertService.popUp({                    title: "Invalid Request! ",                    message: "You can not skip " + $scope.countToExportPopup,                    type: 'danger'                });            } else if (from > $scope.countToExportPopup) {                form = 'bad';                AlertService.popUp({                    title: "Invalid Request! ",                    message: "You can not skip more than " + $scope.countToExportPopup,                    type: 'danger'                });            }            if (form == 'nice') {                var user = $location.path().split("/").pop();                var indexOfHyphen = user.indexOf('-');                var userType;                if (indexOfHyphen == -1) {                    userType = user.slice(0, -1);                } else {                    userType = user.substr(0, indexOfHyphen) + user.substr(indexOfHyphen + 1).charAt(0).toUpperCase() + user.substr(indexOfHyphen + 1).slice(1, -1);                }                $scope.filename = userType;                $http.get('/admin/exportRecord?from=' + from + '&to=' + to + '&role=' + userType).success(function(response) {                    if (response.success === true) {                        $scope.dataToCsv = [];                        var list = response.list;                        $scope.dataToCsv = list.map(validateExportableData);                        $scope.confirmExport();                    }                });            }        };        /*insert null property */        function validateExportableData(list) {            var properties = ['firstname', 'lastname', 'email', 'phone', 'address', 'phone'];            for (i = 0; i < properties.length; i++) {                var property = properties[i];                if (list.hasOwnProperty(properties[i]) === false) {                    list[property] = "n/a";                }            }            var obj = {                firstname: list.firstname,                lastname: list.lastname,                email: list.email,                phone: list.phone,                address: list.address,            };            return obj;        }        /*Confirmation dialog to print record to CSV*/        $scope.confirmExport = function() {            ngDialog.open({                template: 'confirmCsvPopup',                scope: $scope,                className: 'ngdialog-theme-default',                closeByDocument: false            });        };        /*CSV headers*/        $scope.getCsvHeaders = function() {            return ['First Name', 'Last Name', 'Email', 'Address', 'Contact Number'];        };        /*Admin profile detail*/        $scope.adminProfileDetail = function() {            var url = $location.path();            if (url == '/my-profile') {                var userData = JSON.parse(localStorage.getItem('user'));                $scope.user = userData.user;                $scope.pageHeader = "My Profile";            } else if (url == '/my-profile/change-password') {                $scope.pageHeader = "Change Password";            }        };        $scope.changeMyPassword = function(p, form) {            if (p.new == p.confirm) {                var user = localStorage.getItem("user");                var parsedUser = JSON.parse(user);                p.role = 'superAdmin';                $http.post('/admin/changePassword', p).then(function(response) {                    if (response.data.success === true) {                        AlertService.popUp({                            title: "Updated",                            message: response.data.msg,                            type: 'success'                        });                    } else {                        AlertService.popUp({                            title: "Error! ",                            message: response.data.msg,                            type: 'danger'                        });                    }                });            } else {                changePasswordValidation(p);            }        };        var changePasswordValidation = function(p) {            if (p.new !== p.confirm) {                AlertService.popUp({                    title: "Error! ",                    message: 'New password and confirm password are not same',                    type: 'danger'                });            } else if (p.current == p.confirm) {                AlertService.popUp({                    title: "Error! ",                    message: 'You can not use your last one password.',                    type: 'danger'                });            }        };        /*Edit or update admin profile*/        $scope.updateMyProfile = function() {            var updatedProfile = $scope.user;            var demoEmail = updatedProfile.email;            var parsedData = JSON.parse(localStorage.getItem("user"));            var key = parsedData.key;            updatedProfile.key = key;            $http.post('/admin/updateProfile', updatedProfile).success(function(response) {                if (response.success === true) {                    var userObj = {                        user: response.data,                        key: response.key                    };                    localStorage.setItem("user", JSON.stringify(userObj));                    updateInfo();                    AlertService.popUp({                        title: "Updated",                        message: "Profile updated successfully.",                        type: 'success'                    });                } else {                    AlertService.popUp({                        title: "Error! ",                        message: "Your request cannot proceed, you need to update fields to process request.",                        type: 'danger'                    });                }            });        };        /*Call user list function if search bar is empty*/        $scope.callUserList = function(s) {            if (s === undefined) {                    $scope.userList('$');            }else{                refreshTimeout.run(function(){                    $scope.searchUser(s);                });                            }        };        /*back to previous url*/        $scope.back = function() {            $window.history.back();        };        /*get plan list*/        $scope.planList = function() {            $http.get('/admin/getSubscriptionRecords?type=' + 'plan').then(function(response) {                $scope.plans = response.data.data;            });        };                /*show invalid form error message*/        $scope.validate = function() {            validationError.alert();        };        $scope.newUserPage = function(){            $location.path('/users/new/signup');        };        /*user roles*/        $scope.roles = [{            name: 'Professional Trademan',            value: 'professionalTrader'        }, {            name: 'Tenant',            value: 'tenant'        }, {            name: 'Estate Agent',            value: 'estateAgent'        }, {            name: 'Landlord',            value: 'landlord'        }];    }]);