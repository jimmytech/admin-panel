'use strict';

angular.module('app.factories')
.factory('PropertySvr', ['RestSvr', function (RestSvr) {
	return{
		getPaidServices: function(type){
			return RestSvr.get('/property_additionals/' + type, { cache: true }).then(function (response) {
				return response.record;
			});	
		},
		propertyAdditionals: function(type){
			return RestSvr.get('/property_additionals/' + type, { cache: true }).then(function (response) {
				return response.record;
			});
		},
		getMonthlyPrice: function () {
			return [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000, 2100, 2200, 2300, 2400, 2500, 2600, 2700, 2800, 2900, 3000, 3100, 3200, 3300, 3400, 3500, 3600, 3700, 3800, 3900, 4000, 4100, 4200, 4300, 4400, 4500, 4600, 4700, 4800, 4900, 5000, 5100, 5200, 5300, 5400, 5500, 5600, 5700, 5800, 5900, 6000, 6100, 6200, 6300, 6400, 6500, 6600, 6700, 6800, 6900, 7000, 7100, 7200, 7300, 7400, 7500, 7600, 7700, 7800, 7900, 8000, 8100, 8200, 8300, 8400, 8500, 8600, 8700, 8800, 8900, 9000, 9100, 9200, 9300, 9400, 9500, 9600, 9700, 9800, 9900, 10000, 10100, 10200, 10300, 10400, 10500, 10600, 10700, 10800, 10900, 11000, 11100, 11200, 11300, 11400, 11500, 11600, 11700, 11800, 11900, 12000, 12100, 12200, 12300, 12400, 12500, 12600, 12700, 12800, 12900, 13000, 13100, 13200, 13300, 13400, 13500, 13600, 13700, 13800, 13900, 14000, 14100, 14200, 14300, 14400, 14500, 14600, 14700, 14800, 14900, 15000, 15100, 15200, 15300, 15400, 15500, 15600, 15700, 15800, 15900, 16000, 16100, 16200, 16300, 16400, 16500, 16600, 16700, 16800, 16900, 17000, 17100, 17200, 17300, 17400, 17500, 17600, 17700, 17800, 17900, 18000, 18100, 18200, 18300, 18400, 18500, 18600, 18700, 18800, 18900, 19000, 19100, 19200, 19300, 19400, 19500, 19600, 19700, 19800, 19900, 20000];
		},
		getSalePrice: function () {
			return [10000, 60000, 110000, 160000, 210000, 260000, 310000, 360000, 410000, 460000, 510000, 560000, 610000, 660000, 710000, 760000, 810000, 860000, 910000, 960000, 1010000, 1060000, 1110000, 1160000, 1210000, 1260000, 1310000, 1360000, 1410000, 1460000, 1510000, 1560000, 1610000, 1660000, 1710000, 1760000, 1810000, 1860000, 1910000, 1960000, 2010000, 2060000, 2110000, 2160000, 2210000, 2260000, 2310000, 2360000, 2410000, 2460000, 2510000, 2560000, 2610000, 2660000, 2710000, 2760000, 2810000, 2860000, 2910000, 2960000, 3010000, 3060000, 3110000, 3160000, 3210000, 3260000, 3310000, 3360000, 3410000, 3460000, 3510000, 3560000, 3610000, 3660000, 3710000, 3760000, 3810000, 3860000, 3910000, 3960000, 4010000, 4060000, 4110000, 4160000, 4210000, 4260000, 4310000, 4360000, 4410000, 4460000, 4510000, 4560000, 4610000, 4660000, 4710000, 4760000, 4810000, 4860000, 4910000, 4960000, 5010000, 5060000, 5110000, 5160000, 5210000, 5260000, 5310000, 5360000, 5410000, 5460000, 5510000, 5560000, 5610000, 5660000, 5710000, 5760000, 5810000, 5860000, 5910000, 5960000, 6010000, 6060000, 6110000, 6160000, 6210000, 6260000, 6310000, 6360000, 6410000, 6460000, 6510000, 6560000, 6610000, 6660000, 6710000, 6760000, 6810000, 6860000, 6910000, 6960000, 7010000, 7060000, 7110000, 7160000, 7210000, 7260000, 7310000, 7360000, 7410000, 7460000, 7510000, 7560000, 7610000, 7660000, 7710000, 7760000, 7810000, 7860000, 7910000, 7960000, 8010000, 8060000, 8110000, 8160000, 8210000, 8260000, 8310000, 8360000, 8410000, 8460000, 8510000, 8560000, 8610000, 8660000, 8710000, 8760000, 8810000, 8860000, 8910000, 8960000, 9010000, 9060000, 9110000, 9160000, 9210000, 9260000, 9310000, 9360000, 9410000, 9460000, 9510000, 9560000, 9610000, 9660000, 9710000, 9760000, 9810000, 9860000, 9910000, 9960000, 10010000, 10060000, 10110000, 10160000, 10210000, 10260000, 10310000, 10360000, 10410000, 10460000, 10510000, 10560000, 10610000, 10660000, 10710000, 10760000, 10810000, 10860000, 10910000, 10960000, 11010000, 11060000, 11110000, 11160000, 11210000, 11260000, 11310000, 11360000, 11410000, 11460000, 11510000, 11560000, 11610000, 11660000, 11710000, 11760000, 11810000, 11860000, 11910000, 11960000, 12010000];
		}
	};
}]);




/*
function range(start, stop, step){
    if (typeof stop=='undefined'){
        // one param defined
        stop = start;
        start = 0;
    };
    if (typeof step=='undefined'){
        step = 1;
    };
    var result = [];
    for (var i=start; step>0 ? i<stop : i>stop; i+=step){
        result.push(i);
    };
    return result;
};

*/